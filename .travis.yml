# this file is HEAVILY influenced by https://github.com/boostorg/hana/blob/master/.travis.yml

dist: bionic
language: c++

cache: ccache

notifications:
  email: false

git:
  depth: 5

addons:
  # these apt sources will be referenced later (by using *name)
  apt:
    sources: &apt_sources
      - ubuntu-toolchain-r-test
    config:
      retries: true

compiler: gcc
os: linux

# We have branch builds disabled globally to prevent double-builds of PRs.
# This re-enables just the master branch.
branches:
  only:
  - master
  - 0.F-dev

# Overall strategy for what sorts of builds to include:
# We want a build for each compiler and each platform.
# For PRs, we lessen the "each compiler" requirement to just covering the newest
# and oldest relevant version of each compiler.
# We also want to ensure that each of the following tweaks are covered in at
# least one PR build:
# - TILES=1
# - SOUND=1
# - RELEASE=1
# - CMAKE=1
# - LOCALIZE=0
# - Tests with important mods enabled (Magiclysm)
# We try to minimize the number of builds subject to those constraints.
#
# The following used to be here but became too slow to run on Travis and have
# been moved to GitHub Actions:
# - A clang-tidy run
# - SANITIZE=address,undefined

# To see what toolchains are available, consult the following:
# https://github.com/travis-ci/apt-source-safelist/blob/master/ubuntu.json
# https://launchpad.net/%7Eubuntu-toolchain-r/+archive/ubuntu/test/+index
# https://apt.llvm.org/

jobs:
  include:
    # Initial test stage, if this fails everything else is canceled.
    - stage: Test
      # Clang is consistently the fastest to build, so use it for the initial test.
      env: CLANG=clang++-6 TEST_STAGE=1 CXXFLAGS="-Wno-error=unused-command-line-argument -D__extern_always_inline='extern __always_inline'"
      name: "Clang 6 Make build with curses and style check"
      compiler: clang
      addons: &clang6
        apt:
          packages: ["clang-6"]
          sources: [*apt_sources]

    # Then build different configurations and targets in parallel.
    - stage: "Main Compilers"
      env: COMPILER=g++ MODS=--mods=magiclysm LOCALIZE=0
      name: "GCC 7.3 Make build with curses, Magiclysm, and no Localization"
      compiler: gcc
      addons: &gcc73
        apt:
          packages: ["g++-7"]
          sources: [*apt_sources]

    - env: COMPILER=g++-11 CXXFLAGS="-Wno-implicit-fallthrough" TILES=1 SOUND=1
      name: "GCC 8 Make build with Tiles, Sound"
      compiler: gcc
      addons: &gcc11
        apt:
          packages: ["g++-11", "g++-11-multilib", "libc6-dbg", "libc6-dbg:i386", "libsdl2-dev", "libsdl2-ttf-dev", "libsdl2-image-dev", "libsdl2-mixer-dev"]
          sources: *apt_sources

    - env: CLANG=clang++-12
      name: "Clang 12 Make build"
      compiler: clang
      addons: &clang12
        apt:
          packages:
            - clang-12
          sources:
            - sourceline: "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main"
              key_url: "https://apt.llvm.org/llvm-snapshot.gpg.key"

    - stage: "Platforms and Tidy"
    # MXE variant using alternate repository http://mirror.mxe.cc/repos/apt
      env: COMPILER=g++ LDFLAGS="-static-libgcc -static-libstdc++" MXE_TARGET="i686-w64-mingw32.static" WINE="wine" TILES=1 SOUND=1
      name: "MinGW-Win64 Make cross-compile to Windows with Tiles and Sound"
      if: type != pull_request
      compiler: gcc
      addons: &gcc
        apt:
          packages: ["wine"]

    - env: NATIVE=android COMPILER=gcc
      name: "Android build"
      language: android
      android:
        components:
          - build-tools-28.0.1
      cache:
        # The ccache feature in Travis doesn't work for language: android, so
        # do it ourselves.
        directories:
          - $HOME/.ccache

    - env: CLANG=clang++ OSX_MIN=10.13 TILES=1 SOUND=1
      name: "Xcode 10.2 Make build with Tiles and sound (macOS)"
      os: osx
      osx_image: xcode10.2
      compiler: clang

    # Finally check the compiler variants
    - stage: compilers
      # GCC 7.4 is default on Xenial
      env: COMPILER=g++
      name: "GCC 7.4 Make build with Curses"
      if: type != pull_request

    - env: COMPILER=g++-8 CODE_COVERAGE=true
      name: "GCC 8 Make build with Curses and Code Coverage"
      if: type != pull_request
      compiler: gcc
      addons: &gcc6
        apt:
          packages: ["g++-8", "g++-8-multilib", "libc6-dbg", "libc6-dbg:i386"]
          sources: *apt_sources

    - env: COMPILER=g++-9 CXXFLAGS='-Wno-implicit-fallthrough -D_GLIBCXX_DEBUG'
      name: "GCC 9 Make build with Curses and GLIBCXX_DEBUG"
      if: type != pull_request
      compiler: gcc
      addons: &gcc9
        apt:
          packages: ["g++-9", "g++-9-multilib", "libc6-dbg", "libc6-dbg:i386", "lcov"]
          sources: *apt_sources

    - env: COMPILER=g++-10
      name: "GCC 10 Make build with Curses and GLIBCXX_DEBUG"
      if: type != pull_request
      compiler: gcc
      addons: &gcc10
        apt:
          packages: ["g++-10", "g++-10-multilib", "libc6-dbg", "libc6-dbg:i386", "lcov"]
          sources: *apt_sources

    - env: CLANG=clang++-7 CXXFLAGS='-Wno-error=unused-command-line-argument'
      name: "Clang 7 Make build with Curses"
      if: type != pull_request
      compiler: clang
      addons: &clang7
        apt:
          packages: ["clang-7"]
          sources: *apt_sources

    - env: CLANG=clang++-8 CXXFLAGS=-Wno-error=unused-command-line-argument
      name: "Clang 8 Make build with Curses"
      if: type != pull_request
      compiler: clang
      addons: &clang8
        apt:
          packages: ["clang-8"]
          # Luckily the Trusty install Just Works on Xenial
          sources: [*apt_sources, llvm-toolchain-bionic-8]

    - env: CLANG=clang++-9 CXXFLAGS=-Wno-error=unused-command-line-argument
      name: "Clang 9 Make build with Curses"
      if: type != pull_request
      compiler: clang
      addons: &clang9
        apt:
          packages: ["clang-9"]
          sources: [*apt_sources, llvm-toolchain-bionic-9]

    - env: CLANG=clang++-10 TILES=1 SOUND=1 CXXFLAGS=-Wno-error=unused-command-line-argument CMAKE=1 RELEASE=1
      name: "Clang 10 CMake build with tiles and sound"
      if: type != pull_request
      compiler: clang
      addons: &clang60
        apt:
          packages: ["clang-10", "libsdl2-dev", "libsdl2-ttf-dev", "libsdl2-image-dev", "libsdl2-mixer-dev"]
          sources: [*apt_sources, llvm-toolchain-bionic-10]

before_install:
  - if [ "${NATIVE}" == "android" ]; then yes | sdkmanager "platforms;android-28"; fi

before_script:
  - if [ -n "${CLANG}" ]; then COMPILER="$CLANG"; fi
  - ${COMPILER} --version
  - CXX="$COMPILER"
  - source build-scripts/requirements.sh

script:
  - build-scripts/build.sh

after_success:
  - if [ -n "${CODE_COVERAGE}" ]; then coveralls -b . -i src -e tests --gcov /usr/bin/gcov-6; fi
  - if [ -n "${CODE_COVERAGE}" ]; then bash <(curl -s https://codecov.io/bash); fi
